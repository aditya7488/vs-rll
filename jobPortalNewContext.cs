// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace JobServicePortal.Models;

public partial class jobPortalNewContext : DbContext
{
    public jobPortalNewContext()
    {
    }

    public jobPortalNewContext(DbContextOptions<jobPortalNewContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Admin> Admins { get; set; }

    public virtual DbSet<ApplicantRegistration> ApplicantRegistrations { get; set; }

    public virtual DbSet<Application> Applications { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<CompanyRegistration> CompanyRegistrations { get; set; }

    public virtual DbSet<EducationalQualification> EducationalQualifications { get; set; }

    public virtual DbSet<JobApplicant> JobApplicants { get; set; }

    public virtual DbSet<JobPost> JobPosts { get; set; }

    public virtual DbSet<Notification> Notifications { get; set; }

    public virtual DbSet<PasswordReset> PasswordResets { get; set; }

    public virtual DbSet<ProfessionalDetail> ProfessionalDetails { get; set; }

    public virtual DbSet<SavedJob> SavedJobs { get; set; }

    public virtual DbSet<Skill> Skills { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see https://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=WKSPUN05GTR0917;Initial Catalog=jobPortalNew;Integrated Security=True;Encrypt=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Admin>(entity =>
        {
            entity.HasKey(e => e.AdminId).HasName("PK__admin__43AA41410719A08F");

            entity.ToTable("admin");

            entity.HasIndex(e => e.Email, "UQ__admin__AB6E6164C52462A0").IsUnique();

            entity.HasIndex(e => e.Username, "UQ__admin__F3DBC57220937789").IsUnique();

            entity.Property(e => e.AdminId).HasColumnName("admin_id");
            entity.Property(e => e.CreatedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("created_at");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("password");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<ApplicantRegistration>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__applican__B9BE370FDB482F70");

            entity.ToTable("applicant_registration");

            entity.HasIndex(e => e.Email, "UQ__applican__AB6E6164190241C2").IsUnique();

            entity.HasIndex(e => e.Username, "UQ__applican__F3DBC572254F3403").IsUnique();

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("user_id");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.FirstName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("first_name");
            entity.Property(e => e.LastName)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("last_name");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("password");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.ProfilePicture)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("profile_picture");
            entity.Property(e => e.RegistrationDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("registration_date");
            entity.Property(e => e.Username)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("username");
        });

        modelBuilder.Entity<Application>(entity =>
        {
            entity.HasKey(e => e.ApplicationId).HasName("PK__Applicat__3BCBDCF2EB3AFF62");

            entity.Property(e => e.ApplicationId).HasColumnName("application_id");
            entity.Property(e => e.AppliedDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("applied_date");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.JobSeekerId).HasColumnName("job_seeker_id");
            entity.Property(e => e.Status)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("status");

            entity.HasOne(d => d.Job).WithMany(p => p.Applications)
                .HasForeignKey(d => d.JobId)
                .HasConstraintName("FK__Applicati__job_i__398D8EEE");

            entity.HasOne(d => d.JobSeeker).WithMany(p => p.Applications)
                .HasForeignKey(d => d.JobSeekerId)
                .HasConstraintName("FK__Applicati__job_s__3A81B327");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.CompanyId).HasName("PK__Companie__3E2672353172CBA1");

            entity.HasIndex(e => e.CompanyName, "UQ__Companie__6D1B87CB763A04F7").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__Companie__AB6E6164229771C9").IsUnique();

            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.CompanyName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("company_name");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("email");
            entity.Property(e => e.Location)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("location");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("phone");
            entity.Property(e => e.Type)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("type");
            entity.Property(e => e.Website)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("website");
        });

        modelBuilder.Entity<CompanyRegistration>(entity =>
        {
            entity.HasKey(e => e.CompanyId).HasName("PK__company___3E2672351DBC9534");

            entity.ToTable("company_registration");

            entity.HasIndex(e => e.CompanyName, "UQ__company___6D1B87CB0A184D4E").IsUnique();

            entity.HasIndex(e => e.Email, "UQ__company___AB6E61645706488A").IsUnique();

            entity.Property(e => e.CompanyId)
                .ValueGeneratedNever()
                .HasColumnName("company_id");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.CompanyName)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("company_name");
            entity.Property(e => e.ContactPerson)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contact_person");
            entity.Property(e => e.Email)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("phone");
        });

        modelBuilder.Entity<EducationalQualification>(entity =>
        {
            entity.HasKey(e => new { e.UserId, e.Degree }).HasName("PK__Educatio__8B1976F9018D1F95");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Degree)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("degree");
            entity.Property(e => e.Cgpa)
                .HasColumnType("decimal(3, 2)")
                .HasColumnName("cgpa");
            entity.Property(e => e.FieldOfStudy)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("field_of_study");
            entity.Property(e => e.GraduationYear).HasColumnName("graduation_year");
            entity.Property(e => e.Institution)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("institution");

            entity.HasOne(d => d.User).WithMany(p => p.EducationalQualifications)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK__Education__user___300424B4");
        });

        modelBuilder.Entity<JobApplicant>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__job_appl__B9BE370F9B0C1E2B");

            entity.ToTable("job_applicants");

            entity.HasIndex(e => e.EmailId, "UQ__job_appl__3FEF8767B82BDDFF").IsUnique();

            entity.HasIndex(e => e.Phone, "UQ__job_appl__B43B145FCE6C3910").IsUnique();

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Address)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("address");
            entity.Property(e => e.Dob).HasColumnName("dob");
            entity.Property(e => e.EmailId)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("email_id");
            entity.Property(e => e.FirstName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("first_name");
            entity.Property(e => e.Gender)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("gender");
            entity.Property(e => e.LastName)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("last_name");
            entity.Property(e => e.Phone)
                .HasMaxLength(15)
                .IsUnicode(false)
                .HasColumnName("phone");
        });

        modelBuilder.Entity<JobPost>(entity =>
        {
            entity.HasKey(e => e.JobId).HasName("PK__JobPosts__6E32B6A5B0A904E4");

            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.ExperienceRequired).HasColumnName("experience_required");
            entity.Property(e => e.JobDescription)
                .IsRequired()
                .HasColumnType("text")
                .HasColumnName("job_description");
            entity.Property(e => e.JobLocation)
                .HasMaxLength(255)
                .IsUnicode(false)
                .HasColumnName("job_location");
            entity.Property(e => e.JobTitle)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("job_title");
            entity.Property(e => e.JobType)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("job_type");
            entity.Property(e => e.MinimumQualification)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("minimum_qualification");
            entity.Property(e => e.PostDate)
                .HasDefaultValueSql("(getdate())")
                .HasColumnName("post_date");
            entity.Property(e => e.SalaryRange)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("salary_range");

            entity.HasOne(d => d.Company).WithMany(p => p.JobPosts)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK__JobPosts__compan__2D27B809");
        });

        modelBuilder.Entity<Notification>(entity =>
        {
            entity.HasKey(e => e.NotificationId).HasName("PK__notifica__E059842F98EEF507");

            entity.ToTable("notifications");

            entity.Property(e => e.NotificationId).HasColumnName("notification_id");
            entity.Property(e => e.CompanyId).HasColumnName("company_id");
            entity.Property(e => e.Message)
                .HasColumnType("text")
                .HasColumnName("message");
            entity.Property(e => e.Status)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("unread")
                .HasColumnName("status");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Company).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.CompanyId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__notificat__compa__4316F928");

            entity.HasOne(d => d.User).WithMany(p => p.Notifications)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__notificat__user___440B1D61");
        });

        modelBuilder.Entity<PasswordReset>(entity =>
        {
            entity.HasKey(e => e.ResetId).HasName("PK__password__40FB0520DC460F3F");

            entity.ToTable("password_resets");

            entity.HasIndex(e => e.Username, "UQ__password__F3DBC572F3591135").IsUnique();

            entity.Property(e => e.ResetId).HasColumnName("reset_id");
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(32)
                .HasColumnName("password");
            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Username)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("username");

            entity.HasOne(d => d.User);
                //.HasForeignKey(d => d.UserId)
                //.HasConstraintName("FK__password___user___5629CD9C");
        });

        modelBuilder.Entity<ProfessionalDetail>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PK__Professi__B9BE370F9F327AE7");

            entity.Property(e => e.UserId)
                .ValueGeneratedNever()
                .HasColumnName("user_id");
            entity.Property(e => e.CurrentCompany)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("current_company");
            entity.Property(e => e.CurrentRole)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("current_role");
            entity.Property(e => e.NoticePeriod)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("notice_period");
            entity.Property(e => e.TotalExperienceYears)
                .HasColumnType("decimal(4, 2)")
                .HasColumnName("total_experience_years");

            entity.HasOne(d => d.User).WithOne(p => p.ProfessionalDetail)
                .HasForeignKey<ProfessionalDetail>(d => d.UserId)
                .HasConstraintName("FK__Professio__user___32E0915F");
        });

        modelBuilder.Entity<SavedJob>(entity =>
        {
            entity.HasKey(e => e.SavedJobId).HasName("PK__saved_jo__CD4CD6BB9AF3DF63");

            entity.ToTable("saved_jobs");

            entity.Property(e => e.SavedJobId).HasColumnName("saved_job_id");
            entity.Property(e => e.JobId).HasColumnName("job_id");
            entity.Property(e => e.SavedAt)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime")
                .HasColumnName("saved_at");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.Job).WithMany(p => p.SavedJobs)
                .HasForeignKey(d => d.JobId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__saved_job__job_i__4CA06362");

            entity.HasOne(d => d.User).WithMany(p => p.SavedJobs)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.Cascade)
                .HasConstraintName("FK__saved_job__user___4BAC3F29");
        });

        modelBuilder.Entity<Skill>(entity =>
        {
            entity.HasKey(e => e.SkillId).HasName("PK__Skills__FBBA8379D33F1A89");

            entity.Property(e => e.SkillId).HasColumnName("skill_id");
            entity.Property(e => e.CandidateId).HasColumnName("candidate_id");
            entity.Property(e => e.PrimarySkill)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("primary_skill");
            entity.Property(e => e.SecondarySkill)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("secondary_skill");

            entity.HasOne(d => d.Candidate).WithMany(p => p.Skills)
                .HasForeignKey(d => d.CandidateId)
                .HasConstraintName("FK__Skills__candidat__35BCFE0A");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}